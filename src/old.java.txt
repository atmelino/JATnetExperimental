		
		
		
		
		
		
		
		
		
		
					//ac.equatorialToHorizon(ds.year, ds.month + 1, ds.day, hour, ds.minute, ds.second, ds.longitude, ds.latitude);
		
		
					// System.out.println(SPARA);
					// System.out.println(SPARAh);
		
		
		
					// // rf.eclipticCoord.println();
		
		
		
					// rf.equatorialCoord.RA.println();
			// rf.equatorialCoord.println();
			// rf.equatorialToHorizonDS(hour - 3.7, latitude);
			// rf.horizontalCoord.println();
		
		// t =
			// String.format("%-4d%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f%-8.2f",
			// hour, SPA.getNuDegrees(), SPA.getAlphaDegrees(),
			// SPA.getDeltaDegrees(), result.getAzimuth(),
			// 90 - result.getZenithAngle(), rfRA, rfdec, rfaz, rfalt);
		
				// equatorialCoord.RA.println("RA", Angle.DECIMALHOURS);
		// tmpLST.println("LST", Angle.DECIMALHOURS);
		// HA.println("HA", Angle.HOURANGLE);
				//Angle tmpLST = new Angle(LST, Angle.DECIMALHOURS);
		
			// if (azRad < 0)
		// azRad += 2 * Math.PI;
		// System.out.println(Math.toDegrees(azRad));	
				t = String.format("%-24s%-12.2f%-12.2f%-12.2f", "2/17/1985 06:00:00 UTC", 2446113.75, JD_joda_UTC, adt_MST.getJD());
		
		
				chrono = GregorianChronology.getInstance(DateTimeZone.forID("HST"));
		currentDateTime = new DateTime(1985, 2, 17, 6, 0, chrono);
		millis = currentDateTime.getMillis();
		JD_joda_HST = DateTimeUtils.toJulianDay(millis);
		chrono = GregorianChronology.getInstance(DateTimeZone.forID("MST"));
		currentDateTime = new DateTime(1985, 2, 17, 6, 0, chrono);
		millis = currentDateTime.getMillis();
		JD_joda_MST = DateTimeUtils.toJulianDay(millis);
		chrono = GregorianChronology.getInstance(DateTimeZone.forID("CST6CDT"));
		currentDateTime = new DateTime(1985, 2, 17, 6, 0, chrono);
		millis = currentDateTime.getMillis();
		JD_joda_CST = DateTimeUtils.toJulianDay(millis);
		chrono = GregorianChronology.getInstance(DateTimeZone.forID("EST"));
		currentDateTime = new DateTime(1985, 2, 17, 6, 0, chrono);
		millis = currentDateTime.getMillis();
		JD_joda_EST = DateTimeUtils.toJulianDay(millis);
		chrono = GregorianChronology.getInstance(DateTimeZone.forID("UTC"));
		currentDateTime = new DateTime(1985, 2, 17, 6, 0, chrono);
		millis = currentDateTime.getMillis();
		JD_joda_UTC = DateTimeUtils.toJulianDay(millis);
		
			private void julianDate() {

		int year = localDateTime.get(Calendar.YEAR);
		int month = localDateTime.get(Calendar.MONTH) + 1;
		int day = localDateTime.get(Calendar.DAY_OF_MONTH);
		int hour = localDateTime.get(Calendar.HOUR_OF_DAY);
		int minute = localDateTime.get(Calendar.MINUTE);
		int second = localDateTime.get(Calendar.SECOND);

		// if (month <= 2) {
		// year -= 1;
		// month += 12;
		// }
		// double A = Math.floor(year / 100);
		// double B = 2 - A + Math.floor(A / 4);
		// JD0h = Math.floor(365.25 * (year + 4716)) + Math.floor(30.6001 *
		// (month + 1)) + day + B - 1524.5;
		// JD = JD0h + dayfraction;

		/* after Oct 15th, 1582 */
		long j_year = year;
		long j_month = month;
		long A, B, C, D;

		if (month == 1 || month == 2) {
			j_month = month + 12;
			j_year = year - 1;
		}
		A = (long) (j_year / 100);
		B = 2 - A + (long) (A / 4);
		C = (long) (365.25 * j_year);
		D = (long) (30.6001 * (j_month + 1));
		JD = B + C + D + decimal_day(day, hour, minute, second) + 1720994.5;

	}

	private double decimal_day(long day, long hour, long minute, long second) {
		double temp = day + decimal_hour(hour, minute, second) / 24;
		return temp;
	}

	private double decimal_hour(long hour, long minute, long second) {
		double temp = (double) hour + (double) minute / 60 + (double) second / 3600;
		return temp;
	}

	// GregorianCalendar time = new GregorianCalendar(new
	// SimpleTimeZone(SimpleTimeZone.UTC_TIME, "UTC"));
		
		
			public GregorianCalendar getLocalDateTime() {
		return localDateTime;
	}

	public void setLocalDateTime(GregorianCalendar localDateTime) {
		this.localDateTime = localDateTime;
		convert();
	}
		
			private GregorianCalendar localDateTime;
		
		
				GregorianCalendar gc_MST = new GregorianCalendar(TimeZone.getTimeZone("MST"));
		gc_MST.set(1985, Calendar.FEBRUARY, 17, 6, 0);
		AstroDateTime adt_MST = new AstroDateTime(gc_MST);

		GregorianCalendar gc_CST = new GregorianCalendar(TimeZone.getTimeZone("CST"));
		gc_CST.set(1985, Calendar.FEBRUARY, 17, 6, 0);
		AstroDateTime adt_CST = new AstroDateTime(gc_CST);

		GregorianCalendar gc_EST = new GregorianCalendar(TimeZone.getTimeZone("EST"));
		gc_EST.set(1985, Calendar.FEBRUARY, 17, 6, 0);
		AstroDateTime adt_EST = new AstroDateTime(gc_EST);
		
		
	private GregorianCalendar UTCDateTime;
		
		
		// localDateTime.computeTime();

		long millis = localDateTime.getTimeInMillis();
		System.out.println(millis);
		UTCDateTime=new GregorianCalendar(TimeZone.getTimeZone("GMT"));
		UTCDateTime.setTimeInMillis(millis);
		
		DateFormat formatter = new SimpleDateFormat("yyyy-MMM-dd hh:mm:ss");
		formatter.setLenient(false);
		Date utc = UTCDateTime.getTime();

		//System.out.println(formatter.format(utc));  
		System.out.println(UTCDateTime);  
		
		
	// int localYear;
	// int localMonth;
	// int localDay;
	// int localHour;
	// int localMinute;
	// int localSecond;


		if (h.positive)
			System.out.print("+");
		else
			System.out.print("-");
			if (h.positive)
				System.out.print("+");
			else
				System.out.print("-");


		if (radians > 0.) {
			a.positive = true;
			sha.positive = true;
			h.positive = true;
			tmpdegrees = degrees;
			shadegrees = 360. - degrees;
		} else {
			a.positive = false;
			sha.positive = false;
			h.positive = false;
			tmpdegrees = -degrees;
			shadegrees = -degrees;
		}



			// DateTime dt = new DateTime(2004, 7, 27, 0, 0);
			// System.out.println("azimuth " + result.getAzimuth());
			// System.out.println("altitude " + (90 - result.getZenithAngle()));
			//rf.equatorialCoord.RA.println("RA", Angle.DEGREES);
			//rf.equatorialCoord.dec.println("dec", Angle.DEGREES);

		
		//System.out.println("geocentric sun RA "+alphaDegrees+" dec "+deltaDegrees);




		// double decDeg = Math.toDegrees(decRad);
		// double HADeg = Math.toDegrees(HARad);
		// double HAHours = HADeg / 15.;
		// s = String.format("%-12s%-12s%-12s", "dec(deg)", "HA(deg)",
		// "HA(hours)");
		// System.out.println(s);
		// t = String.format("%-12.5f%-12.5f%-12.5f", decDeg, HADeg, HAHours);
		// System.out.println(t);


		// Chronology chrono = JulianChronology.getInstance();
		// Chronology chrono = GJChronology.getInstance();
		// Chronology chrono = ISOChronology.getInstance();
		// Chronology chrono =
		// GregorianChronology.getInstance(DateTimeZone.forID("UTC"));
		// Chronology chrono = GregorianChronology.getInstance();
		// DateTime currentDateTime = new DateTime(1979, 12, 30,18, 0, chrono);
		// DateTime currentDateTime = new DateTime(1980, 1, 1,0, 0);
//		DateTime dt2 = new DateTime(1979, 12, 31, 0, 0, DateTimeZone.forID("UTC"));
//		millis = dt2.getMillis();
//		JD = DateTimeUtils.toJulianDay(millis);
//		System.out.println("JD 2 =" + JD);
long millis;
		double JD;
				millis = currentDateTime.getMillis();
		JD = DateTimeUtils.toJulianDay(millis);
		System.out.println("JD 1 =" + JD);
		import org.joda.time.DateTimeUtils;
		import org.joda.time.Chronology;
		//import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
//import org.joda.time.chrono.ISOChronology;
//import org.joda.time.chrono.JulianChronology;
		
		horizontalCoord.println();
		

import org.apache.commons.math3.geometry.spherical.twod.S2Point;

		double decDeg = Math.toDegrees(decRad);
	
			rf.horizontalCoord = new S2Point(az, alt);
			double az = org.apache.commons.math3.util.FastMath.toRadians(283.271111);
		double alt = org.apache.commons.math3.util.FastMath.toRadians(19.334444);
	import org.apache.commons.math3.geometry.spherical.twod.S2Point;
//import org.apache.commons.math3.util.FastMath;
			double azDeg = org.apache.commons.math3.util.FastMath.toDegrees(horizontalCoord.getTheta());
		double altDeg = org.apache.commons.math3.util.FastMath.toDegrees(horizontalCoord.getPhi());
		double latDeg = org.apache.commons.math3.util.FastMath.toDegrees(lat);
			double decDeg = org.apache.commons.math3.util.FastMath.toDegrees(dec);
		double HADeg = org.apache.commons.math3.util.FastMath.toDegrees(HA);
		s = String.format("%-12s%-12s", "dec(deg)", "HA(deg)");
		System.out.println(s);
		t = String.format("%-12.5f%-12.5f", decDeg, HADeg);
		System.out.println(t);
			String s = String.format("%-12s%-12s%-12s", "az(rad)", "alt(rad)", "lat(rad)");
		System.out.println(s);
		String t = String.format("%-12.5f%-12.5f%-12.5f", az, alt, lat);
		System.out.println(t);
		s = String.format("%-12s%-12s%-12s", "az(deg)", "alt(deg)", "lat(deg)");
		System.out.println(s);
		double azDeg = horizontalCoord.azimuth.degrees;
		double altDeg = horizontalCoord.altitude.radians;
		double latDeg = org.apache.commons.math3.util.FastMath.toDegrees(lat);
		t = String.format("%-12.5f%-12.5f%-12.5f", azDeg, altDeg, latDeg);
		System.out.println(t);
		
	
	
		// azimuth angle θ in the x-y plane as the first coordinate, and the polar
	// angle φ as the second coordinate
	public S2Point horizontalCoord = new S2Point(0, 0);
	
		// public S2Point equatorialCoord = new S2Point(0, 0);
		// public S2Point eclipticCoord = new S2Point(0, 0);
	
		// MutableDateTime epoch = new MutableDateTime();
		// epoch.setDate(0); //Set to Epoch time
		// DateTime now = new DateTime();
		//
		// Days days = Days.daysBetween(epoch, now);
		// Weeks weeks = Weeks.weeksBetween(epoch, now);
		// Months months = Months.monthsBetween(epoch, now);
		//
		// System.out.println("Days Since Epoch: " + days.getDays());
		// System.out.println("Weeks Since Epoch: " + weeks.getWeeks());
		// System.out.println("Months Since Epoch: " + months.getMonths());



		//Weeks weeks = Weeks.weeksBetween(epoch, dt);
		//Months months = Months.monthsBetween(epoch, dt);

				//System.out.println("Weeks Since Epoch: " + weeks.getWeeks());
		//System.out.println("Months Since Epoch: " + months.getMonths());
		//int daysInt = Math.abs(days.getDays());
		//System.out.println("daysInt: " + daysInt);

		